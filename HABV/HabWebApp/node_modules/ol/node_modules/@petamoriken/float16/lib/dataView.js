"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFloat16 = getFloat16;
exports.setFloat16 = setFloat16;

var _is = require("./is");

var _lib = require("./lib");

/**
 * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView.
 * @param {DataView} dataView
 * @param {nunmber} byteOffset
 * @param {*} opts
 */
function getFloat16(dataView, byteOffset) {
  if (!(0, _is.isDataView)(dataView)) throw new TypeError("First argument to getFloat16 function must be a DataView");

  for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    opts[_key - 2] = arguments[_key];
  }

  return (0, _lib.convertToNumber)(dataView.getUint16(byteOffset, ...opts));
}
/**
 * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView.
 * @param {DataView} dataView
 * @param {number} byteOffset
 * @param {number} value
 * @param {*} opts
 */


function setFloat16(dataView, byteOffset, value) {
  if (!(0, _is.isDataView)(dataView)) throw new TypeError("First argument to setFloat16 function must be a DataView");

  for (var _len2 = arguments.length, opts = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    opts[_key2 - 3] = arguments[_key2];
  }

  dataView.setUint16(byteOffset, (0, _lib.roundToFloat16Bits)(value), ...opts);
}