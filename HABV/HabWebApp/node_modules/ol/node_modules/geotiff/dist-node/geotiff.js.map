{"version":3,"sources":["globals.js","rgb.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","compression/index.js","resample.js","geotiffimage.js","dataview64.js","dataslice.js","pool.js","source/httputils.js","source/basesource.js","utils.js","source/blockedsource.js","source/client/base.js","source/client/fetch.js","source/client/xhr.js","source/client/http.js","source/remote.js","source/arraybuffer.js","source/filereader.js","source/file.js","geotiffwriter.js","logging.js","geotiff.js","predictor.js","compression/basedecoder.js","../node_modules/parcel-bundler/src/builtins/loaders/node/js-loader.js"],"names":["fieldTagNames","fieldTags","key","hasOwnProperty","parseInt","fieldTagTypes","arrayFields","BitsPerSample","ExtraSamples","SampleFormat","StripByteCounts","StripOffsets","StripRowCounts","TileByteCounts","TileOffsets","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","WhiteIsZero","BlackIsZero","RGB","Palette","TransparencyMask","CMYK","YCbCr","CIELab","ICCLab","ExtraSamplesValues","Unspecified","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","geoKeyNames","geoKeys","fromWhiteIsZero","raster","max","width","height","rgbRaster","Uint8Array","value","i","j","length","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","c","m","y","k","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","r","g","b","x","z","Math","min","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","map","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","e","executor","promise","prototype","onSuccess","onError","registry","Map","addDecoder","cases","importFn","forEach","set","getDecoder","fileDirectory","get","Compression","undefined","default","copyNewSize","array","samplesPerPixel","Object","getPrototypeOf","resampleNearest","valueArrays","inWidth","inHeight","outWidth","outHeight","relX","relY","newArray","cy","round","cx","lerp","v0","v1","t","resampleBilinear","rawY","yl","floor","yh","ceil","rawX","tx","xl","xh","ll","hl","lh","hh","resample","method","resampleNearestInterleaved","valueArray","samples","resampleBilinearInterleaved","resampleInterleaved","GeoTIFFImage","sum","start","end","s","arrayForType","format","bitsPerSample","size","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","needsNormalization","normalizeArray","inBuffer","planarConfiguration","tileWidth","tileHeight","view","DataView","samplesToTransfer","outArray","bitMask","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","byteOffset","innerBitOffset","getUint8","getUint16","raw","getUint32","buffer","constructor","dataView","littleEndian","cache","source","tiles","isTiled","PlanarConfiguration","getFileDirectory","getGeoKeys","getWidth","ImageWidth","getHeight","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","getBytesPerPixel","bytes","getSampleByteSize","RangeError","getReaderForSample","sampleIndex","getInt8","getInt16","getInt32","offset","getFloat32","getFloat64","getSampleFormat","getBitsPerSample","getArrayForSample","getTileOrStrip","sample","poolOrDecoder","signal","numTilesPerRow","numTilesPerCol","index","byteCount","fetch","request","data","decode","sampleFormat","_readRaster","imageWindow","interleave","resampleMethod","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","push","promises","yTile","xTile","si","tile","blockHeight","firstLine","firstCol","lastLine","lastCol","reader","ymax","xmax","pixelOffset","call","windowCoordinate","resampled","readRasters","window","wnd","pool","fillValue","imageWindowWidth","numPixels","apply","fill","result","readRGB","enableAlpha","pi","PhotometricInterpretation","subOptions","ColorMap","red","green","blue","getTiePoints","ModelTiepoint","tiePoints","getGDALMetadata","metadata","GDAL_METADATA","string","xmlDom","tagName","root","items","children","filter","child","item","Number","attributes","name","getGDALNoData","GDAL_NODATA","getOrigin","modelTransformation","ModelTransformation","getResolution","referenceImage","modelPixelScale","ModelPixelScale","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","getBoundingBox","origin","resolution","x1","y1","x2","y2","DataView64","arrayBuffer","_dataView","getUint64","left","right","combined","isSafeInteger","getInt64","isNegative","carrying","byte","getFloat16","DataSlice","sliceOffset","bigTiff","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","readUint8","readInt8","readUint16","readInt16","readUint32","readInt32","readFloat32","readFloat64","readUint64","readInt64","readOffset","Pool","defaultPoolSize","navigator","hardwareConcurrency","worker","Worker","queue","destroy","terminate","CRLFCRLF","itemsToObject","fromEntries","obj","parseHeaders","text","split","line","kv","str","trim","parseContentType","rawContentType","rawParams","params","param","parseContentRange","rawContentRange","total","parseByteRanges","responseArrayBuffer","boundary","decoder","TextDecoder","out","startBoundary","endBoundary","startsWith","innerText","substr","endOfHeaders","indexOf","headers","startOfData","fileSize","BaseSource","slices","fetchSlice","close","assign","target","chunk","iterable","results","lengthOfIterable","chunked","ci","endsWith","expectedEnding","actualEnding","func","invert","oldObj","newObj","range","n","times","numTimes","toArray","toArrayRecursively","input","headerValue","number","unit","first","last","wait","milliseconds","setTimeout","zip","a","A","from","B","AbortError","captureStackTrace","CustomAggregateError","errors","message","AggregateError","Block","top","BlockGroup","blockIds","BlockedSource","blockSize","cacheSize","blockCache","LRUCache","blockRequests","blockIdsToFetch","Set","cachedBlocks","missingBlockIds","current","blockId","has","add","fetchBlocks","block","cachedBlock","allSettled","values","some","status","retriedBlockRequests","keys","rejected","reason","aborted","requiredBlocks","readSliceData","groups","groupBlocks","groupRequests","groupIndex","group","blockRequest","response","blockOffset","o","delete","clear","sortedBlockIds","sort","lastBlockId","blocks","blockIdLow","blockIdHigh","sliceData","ArrayBuffer","sliceView","delta","topDelta","blockInnerOffset","usedBlockLength","rangeInnerOffset","blockView","BaseResponse","ok","getHeader","headerName","getData","BaseClient","credentials","FetchResponse","FetchClient","XHRResponse","xhr","getResponseHeader","XHRClient","constructRequest","XMLHttpRequest","open","responseType","entries","setRequestHeader","onload","onerror","onabort","send","abort","addEventListener","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","urlMod","parse","httpApi","protocol","http","https","chunks","on","Buffer","concat","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","join","byteRanges","others","maybeWrapInBlockedSource","makeFetchSource","blockOptions","makeXHRSource","makeHttpSource","makeRemoteSource","forceXHR","clientOptions","ArrayBufferSource","makeBufferSource","FileReaderSource","file","blob","FileReader","event","readAsArrayBuffer","makeFileReaderSource","closeAsync","fd","openAsync","path","flags","mode","readAsync","args","read","bytesRead","FileSource","openRequest","alloc","makeFileSource","tagName2Code","geoKeyName2Code","name2code","typeName2byte","numBytesInIfd","_binBE","nextZero","oincr","readUshort","buff","p","readShort","ui8","i16","readInt","i32","readUint","ui32","readASCII","l","String","fromCharCode","readFloat","fl32","readDouble","fl64","writeUshort","writeUint","writeASCII","charCodeAt","writeDouble","_writeIFD","bin","_offset","ifd","eoff","tag","typeName","typeNum","val","num","dlen","toff","encodeIfds","ifds","ifdo","noffs","encodeImage","prfx","img","convertToTids","console","error","metadataDefaults","writeGeotiff","numBands","flattenedValues","rowIndex","columnIndex","bandIndex","GeoKeyDirectory","NumberOfKeys","geoKey","KeyID","Count","TIFFTagLocation","valueOffset","GeoAsciiParams","log","encodedMetadata","outputImage","DummyLogger","debug","info","warn","time","timeEnd","LOGGER","setLogger","logger","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","parseGeoKeyDirectory","rawGeoKeyDirectory","geoKeyDirectory","location","count","subarray","getValues","dataSlice","readMethod","fieldTypeLength","ImageFileDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","GeoTIFFBase","options","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","oX","oY","rX","rY","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","imgResX","imgResY","imageResX","imageResY","GeoTIFF","firstIFDOffset","ifdRequests","ghostValues","getSlice","fallbackSize","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","actualOffset","requestIFD","previousIfd","hasNext","getGhostValues","detectionString","heuristicAreaSize","valuesString","metadataSize","fullString","fromSource","headerData","BOM","TypeError","magicNumber","offsetByteSize","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","visited","relativeIndex","imageFile","ii","imageCounts","reduce","fromUrl","fromArrayBuffer","fromFile","fromBlob","fromUrls","mainUrl","overviewUrls","writeArrayBuffer","decodeRowAcc","row","stride","decodeRowFloatingPoint","bytesPerSample","wc","copy","applyPredictor","predictor","BaseDecoder","decoded","decodeBlock","Predictor","fs","readFile","__dirname","setImmediate","Function"],"mappings":"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","file":"geotiff.js","sourceRoot":"../src","sourcesContent":["export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n};\n\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) cases = [cases];\n  cases.forEach(c => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw').then(m => m.default));\naddDecoder(5,              () => import('./lzw').then(m => m.default));\naddDecoder(6,              () => { throw new Error('old style JPEG compression is not supported.') });\naddDecoder(7,              () => import('./jpeg').then(m => m.default));\naddDecoder([8, 32946],     () => import('./deflate').then(m => m.default));\naddDecoder(32773,          () => import('./packbits').then(m => m.default));\naddDecoder(34887,          () => import('./lerc').then(m => m.default));\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","/* eslint max-len: [\"error\", { \"code\": 120 }] */\n\nimport { getFloat16 } from '@petamoriken/float16';\nimport { parse } from 'txml/txml';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb';\nimport { getDecoder } from './compression';\nimport { resample, resampleInterleaved } from './resample';\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {Source} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray[]|TypedArray} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<TypedArray[]>|Promise<TypedArray>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(this.getWidth() / this.getTileWidth()),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(this.getHeight() / this.getTileHeight()),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sampleIndex);\n          }\n          const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          promises.push(promise);\n          promise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]));\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]));\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {Object} [options={}] optional parameters\n   * @param {Array} [options.window=whole image] the subset to read data from.\n   * @param {Array} [options.samples=all samples] the selection of samples to read from.\n   * @param {Boolean} [options.interleave=false] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {Number} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is\n   *                                 not the same as the images, resampling will be\n   *                                 performed.\n   * @param {number} [options.height] The desired height of the output. When the width\n   *                                  is not the same as the images, resampling will\n   *                                  be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {number|number[]} [options.fillValue] The value to use for parts of the image\n   *                                              outside of the images extent. When\n   *                                              multiple samples are requested, an\n   *                                              array of fill values can be passed.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise.<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * greayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array} [options.window=whole image] the subset to read data from.\n   * @param {Boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {Number} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {bool} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise.<TypedArray|TypedArray[]>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {Number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n    const xmlDom = parse(string.substring(0, string.length - 1));\n\n    if (!xmlDom[0].tagName) {\n      throw new Error('Failed to parse GDAL metadata XML.');\n    }\n\n    const root = xmlDom[0];\n    if (root.tagName !== 'GDALMetadata') {\n      throw new Error('Unexpected GDAL metadata XML tag.');\n    }\n\n    let items = root.children\n      .filter((child) => child.tagName === 'Item');\n\n    if (sample !== null) {\n      items = items.filter((item) => Number(item.attributes.sample) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[item.attributes.name] = item.children[0];\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {Number} or null\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[0],\n        modelTransformation[5],\n        modelTransformation[10],\n      ];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @returns {Array} The bounding box\n   */\n  getBoundingBox() {\n    const origin = this.getOrigin();\n    const resolution = this.getResolution();\n\n    const x1 = origin[0];\n    const y1 = origin[1];\n\n    const x2 = x1 + (resolution[0] * this.getWidth());\n    const y2 = y1 + (resolution[1] * this.getHeight());\n\n    return [\n      Math.min(x1, x2),\n      Math.min(y1, y2),\n      Math.max(x1, x2),\n      Math.max(y1, y2),\n    ];\n  }\n}\n\nexport default GeoTIFFImage;\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + 2 ** 32 * right;\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`\n        );\n      }\n      return combined;\n    }\n    combined = 2 ** 32 * left + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative =\n      (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * 256 ** i;\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + 2 ** 32 * right;\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`,\n        );\n      }\n      return combined;\n    }\n    combined = 2 ** 32 * left + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`,\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative =\n      (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80) >\n      0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i)\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * 256 ** i;\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","import { Pool as tPool, spawn, Worker, Transfer } from 'threads';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency : null;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {Worker} worker The decoder worker, loaded and initialised. Enables\n   *                        loading the worker using worker-loader(or others) externally\n   *                        when using this library as a webpack dependency.\n   */\n  constructor(size = defaultPoolSize, worker = new Worker('./decoder.worker.js')) {\n    this.pool = tPool(() => spawn(worker), size);\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    return new Promise((resolve, reject) => {\n      this.pool.queue(async (decode) => {\n        try {\n          const data = await decode(fileDirectory, Transfer(buffer));\n          resolve(data);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  destroy() {\n    this.pool.terminate(true);\n  }\n}\n\nexport default Pool;\n","\nconst CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map(line => {\n      const kv = line.split(':').map(str => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length)\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error(\"Could not find initial boundary\");\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return await Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","import LRUCache from 'lru-cache';\nimport { BaseSource } from './basesource';\nimport { AbortError, AggregateError, wait, zip } from '../utils';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {Source} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new LRUCache({ max: cacheSize });\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {basesource/Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const cachedBlocks = new Map();\n    const blockRequests = new Map();\n    const missingBlockIds = new Set();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      // chunk the current slice into blocks\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        // check if the block is cached, being requested or still missing\n        const blockId = Math.floor(current / this.blockSize);\n\n        if (this.blockCache.has(blockId)) {\n          cachedBlocks.set(blockId, this.blockCache.get(blockId));\n        } else if (this.blockRequests.has(blockId)) {\n          blockRequests.set(blockId, this.blockRequests.get(blockId));\n        } else if (this.blockIdsToFetch.has(blockId)) {\n          missingBlockIds.add(blockId);\n        } else {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.add(blockId);\n        }\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    for (const blockId of missingBlockIds) {\n      const block = this.blockRequests.get(blockId);\n      const cachedBlock = this.blockCache.get(blockId);\n\n      if (block) {\n        blockRequests.set(blockId, block);\n      } else if (cachedBlock) {\n        cachedBlocks.set(blockId, cachedBlock);\n      } else {\n        throw new Error(`Block ${blockId} is not in the block requests`);\n      }\n    }\n\n    // actually await all pending requests\n    let results = await Promise.allSettled(blockRequests.values());\n\n    // perform retries if a block was interrupted by a previous signal\n    if (results.some((result) => result.status === 'rejected')) {\n      const retriedBlockRequests = new Set();\n      for (const [blockId, result] of zip(blockRequests.keys(), results)) {\n        const { rejected, reason } = result;\n        if (rejected) {\n          // push some blocks back to the to-fetch list if they were\n          // aborted, but only when a different signal was used\n          if (reason.name === 'AbortError' && reason.signal !== signal) {\n            this.blockIdsToFetch.add(blockId);\n            retriedBlockRequests.add(blockId);\n          }\n        }\n      }\n\n      // start the retry of some blocks if required\n      if (this.blockIdsToFetch.length > 0) {\n        this.fetchBlocks(signal);\n        for (const blockId of retriedBlockRequests) {\n          const block = this.blockRequests.get(blockId);\n          if (!block) {\n            throw new Error(`Block ${blockId} is not in the block requests`);\n          }\n          blockRequests.set(blockId, block);\n        }\n        results = await Promise.allSettled(Array.from(blockRequests.values()));\n      }\n    }\n\n    // throw an error (either abort error or AggregateError if no abort was done)\n    if (results.some((result) => result.status === 'rejected')) {\n      if (signal && signal.aborted) {\n        throw new AbortError('Request was aborted');\n      }\n      throw new AggregateError(\n        results.filter((result) => result.status === 'rejected').map((result) => result.reason),\n        'Request failed',\n      );\n    }\n\n    // extract the actual block responses\n    const values = results.map((result) => result.value);\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(Array.from(blockRequests.keys()), values));\n    for (const [blockId, block] of cachedBlocks) {\n      requiredBlocks.set(blockId, block);\n    }\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          const blockRequest = (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n              );\n              this.blockCache.set(blockId, block);\n              return block;\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n              }\n              throw err;\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })();\n          this.blockRequests.set(blockId, blockRequest);\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      const top = slice.offset + slice.length;\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor((slice.offset + slice.length) / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) {\n    throw new Error(`request is not implemented`);\n  }\n}\n\n","import { BaseClient, BaseResponse } from './base';\n\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({ headers, credentials, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import { BaseClient, BaseResponse } from './base';\nimport { AbortError } from '../../utils';\n\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base';\nimport { AbortError } from '../../utils';\n\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolve) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolve(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils';\nimport { BaseSource } from './basesource';\nimport { BlockedSource } from './blockedsource';\n\nimport { FetchClient } from './client/fetch';\nimport { XHRClient } from './client/xhr';\nimport { HttpClient } from './client/http';\n\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return await Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return onyl the first\n\n        // get the rest of the slices and fetch them iteratetively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, blockSize, cacheSize);\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","import { BaseSource } from './basesource';\nimport { AbortError } from '../utils';\n\n\nclass ArrayBufferSource extends BaseSource {\n  constructor(arrayBuffer) {\n    super();\n    this.arrayBuffer = arrayBuffer;\n  }\n\n  fetchSlice(slice, signal) {\n    if (signal && signal.aborted) {\n      throw new AbortError('Request aborted');\n    }\n    return this.arrayBuffer.slice(slice.offset, slice.offset + slice.length);\n  }\n}\n\nexport function makeBufferSource(arrayBuffer) {\n  return new ArrayBufferSource(arrayBuffer);\n}\n","import { BaseSource } from './basesource';\n\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n","import fs from 'fs';\nimport { BaseSource } from './basesource';\n\nfunction closeAsync(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction openAsync(path, flags, mode = undefined) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, flags, mode, (err, fd) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(fd);\n      }\n    });\n  });\n}\n\nfunction readAsync(...args) {\n  return new Promise((resolve, reject) => {\n    fs.read(...args, (err, bytesRead, buffer) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ bytesRead, buffer });\n      }\n    });\n  });\n}\n\nclass FileSource extends BaseSource {\n  constructor(path) {\n    super();\n    this.path = path;\n    this.openRequest = openAsync(path, 'r');\n  }\n\n  async fetchSlice(slice) {\n    // TODO: use `signal`\n    const fd = await this.openRequest;\n    const { buffer } = await readAsync(\n      fd,\n      Buffer.alloc(slice.length),\n      0,\n      slice.length,\n      slice.offset,\n    );\n    return buffer.buffer;\n  }\n\n  async close() {\n    const fd = await this.openRequest;\n    await closeAsync(fd);\n  }\n}\n\nexport function makeFileSource(path) {\n  return new FileSource(path);\n}\n","/*\n  Some parts of this file are based on UTIF.js,\n  which was released under the MIT License.\n  You can view that here:\n  https://github.com/photopea/UTIF.js/blob/master/LICENSE\n*/\nimport { fieldTagNames, fieldTagTypes, fieldTypeNames, geoKeyNames } from './globals';\nimport { assign, endsWith, forEach, invert, times } from './utils';\n\nconst tagName2Code = invert(fieldTagNames);\nconst geoKeyName2Code = invert(geoKeyNames);\nconst name2code = {};\nassign(name2code, tagName2Code);\nassign(name2code, geoKeyName2Code);\nconst typeName2byte = invert(fieldTypeNames);\n\n// config variables\nconst numBytesInIfd = 1000;\n\nconst _binBE = {\n  nextZero: (data, o) => {\n    let oincr = o;\n    while (data[oincr] !== 0) {\n      oincr++;\n    }\n    return oincr;\n  },\n  readUshort: (buff, p) => {\n    return (buff[p] << 8) | buff[p + 1];\n  },\n  readShort: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 1];\n    a[1] = buff[p + 0];\n    return _binBE.i16[0];\n  },\n  readInt: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.i32[0];\n  },\n  readUint: (buff, p) => {\n    const a = _binBE.ui8;\n    a[0] = buff[p + 3];\n    a[1] = buff[p + 2];\n    a[2] = buff[p + 1];\n    a[3] = buff[p + 0];\n    return _binBE.ui32[0];\n  },\n  readASCII: (buff, p, l) => {\n    return l.map((i) => String.fromCharCode(buff[p + i])).join('');\n  },\n  readFloat: (buff, p) => {\n    const a = _binBE.ui8;\n    times(4, (i) => {\n      a[i] = buff[p + 3 - i];\n    });\n    return _binBE.fl32[0];\n  },\n  readDouble: (buff, p) => {\n    const a = _binBE.ui8;\n    times(8, (i) => {\n      a[i] = buff[p + 7 - i];\n    });\n    return _binBE.fl64[0];\n  },\n  writeUshort: (buff, p, n) => {\n    buff[p] = (n >> 8) & 255;\n    buff[p + 1] = n & 255;\n  },\n  writeUint: (buff, p, n) => {\n    buff[p] = (n >> 24) & 255;\n    buff[p + 1] = (n >> 16) & 255;\n    buff[p + 2] = (n >> 8) & 255;\n    buff[p + 3] = (n >> 0) & 255;\n  },\n  writeASCII: (buff, p, s) => {\n    times(s.length, (i) => {\n      buff[p + i] = s.charCodeAt(i);\n    });\n  },\n  ui8: new Uint8Array(8),\n};\n\n_binBE.fl64 = new Float64Array(_binBE.ui8.buffer);\n\n_binBE.writeDouble = (buff, p, n) => {\n  _binBE.fl64[0] = n;\n  times(8, (i) => {\n    buff[p + i] = _binBE.ui8[7 - i];\n  });\n};\n\n\nconst _writeIFD = (bin, data, _offset, ifd) => {\n  let offset = _offset;\n\n  const keys = Object.keys(ifd).filter((key) => {\n    return key !== undefined && key !== null && key !== 'undefined';\n  });\n\n  bin.writeUshort(data, offset, keys.length);\n  offset += 2;\n\n  let eoff = offset + (12 * keys.length) + 4;\n\n  for (const key of keys) {\n    let tag = null;\n    if (typeof key === 'number') {\n      tag = key;\n    } else if (typeof key === 'string') {\n      tag = parseInt(key, 10);\n    }\n\n    const typeName = fieldTagTypes[tag];\n    const typeNum = typeName2byte[typeName];\n\n    if (typeName == null || typeName === undefined || typeof typeName === 'undefined') {\n      throw new Error(`unknown type of tag: ${tag}`);\n    }\n\n    let val = ifd[key];\n\n    if (typeof val === 'undefined') {\n      throw new Error(`failed to get value for key ${key}`);\n    }\n\n    // ASCIIZ format with trailing 0 character\n    // http://www.fileformat.info/format/tiff/corion.htm\n    // https://stackoverflow.com/questions/7783044/whats-the-difference-between-asciiz-vs-ascii\n    if (typeName === 'ASCII' && typeof val === 'string' && endsWith(val, '\\u0000') === false) {\n      val += '\\u0000';\n    }\n\n    const num = val.length;\n\n    bin.writeUshort(data, offset, tag);\n    offset += 2;\n\n    bin.writeUshort(data, offset, typeNum);\n    offset += 2;\n\n    bin.writeUint(data, offset, num);\n    offset += 4;\n\n    let dlen = [-1, 1, 1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 8][typeNum] * num;\n    let toff = offset;\n\n    if (dlen > 4) {\n      bin.writeUint(data, offset, eoff);\n      toff = eoff;\n    }\n\n    if (typeName === 'ASCII') {\n      bin.writeASCII(data, toff, val);\n    } else if (typeName === 'SHORT') {\n      times(num, (i) => {\n        bin.writeUshort(data, toff + (2 * i), val[i]);\n      });\n    } else if (typeName === 'LONG') {\n      times(num, (i) => {\n        bin.writeUint(data, toff + (4 * i), val[i]);\n      });\n    } else if (typeName === 'RATIONAL') {\n      times(num, (i) => {\n        bin.writeUint(data, toff + (8 * i), Math.round(val[i] * 10000));\n        bin.writeUint(data, toff + (8 * i) + 4, 10000);\n      });\n    } else if (typeName === 'DOUBLE') {\n      times(num, (i) => {\n        bin.writeDouble(data, toff + (8 * i), val[i]);\n      });\n    }\n\n    if (dlen > 4) {\n      dlen += (dlen & 1);\n      eoff += dlen;\n    }\n\n    offset += 4;\n  }\n\n  return [offset, eoff];\n};\n\nconst encodeIfds = (ifds) => {\n  const data = new Uint8Array(numBytesInIfd);\n  let offset = 4;\n  const bin = _binBE;\n\n  // set big-endian byte-order\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[0] = 77;\n  data[1] = 77;\n\n  // set format-version number\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\n  data[3] = 42;\n\n  let ifdo = 8;\n\n  bin.writeUint(data, offset, ifdo);\n\n  offset += 4;\n\n  ifds.forEach((ifd, i) => {\n    const noffs = _writeIFD(bin, data, ifdo, ifd);\n    ifdo = noffs[1];\n    if (i < ifds.length - 1) {\n      bin.writeUint(data, noffs[0], ifdo);\n    }\n  });\n\n  if (data.slice) {\n    return data.slice(0, ifdo).buffer;\n  }\n\n  // node hasn't implemented slice on Uint8Array yet\n  const result = new Uint8Array(ifdo);\n  for (let i = 0; i < ifdo; i++) {\n    result[i] = data[i];\n  }\n  return result.buffer;\n};\n\nconst encodeImage = (values, width, height, metadata) => {\n  if (height === undefined || height === null) {\n    throw new Error(`you passed into encodeImage a width of type ${height}`);\n  }\n\n  if (width === undefined || width === null) {\n    throw new Error(`you passed into encodeImage a width of type ${width}`);\n  }\n\n  const ifd = {\n    256: [width], // ImageWidth\n    257: [height], // ImageLength\n    273: [numBytesInIfd], // strips offset\n    278: [height], // RowsPerStrip\n    305: 'geotiff.js', // no array for ASCII(Z)\n  };\n\n  if (metadata) {\n    for (const i in metadata) {\n      if (metadata.hasOwnProperty(i)) {\n        ifd[i] = metadata[i];\n      }\n    }\n  }\n\n  const prfx = new Uint8Array(encodeIfds([ifd]));\n\n  const img = new Uint8Array(values);\n\n  const samplesPerPixel = ifd[277];\n\n  const data = new Uint8Array(numBytesInIfd + (width * height * samplesPerPixel));\n  times(prfx.length, (i) => {\n    data[i] = prfx[i];\n  });\n  forEach(img, (value, i) => {\n    data[numBytesInIfd + i] = value;\n  });\n\n  return data.buffer;\n};\n\nconst convertToTids = (input) => {\n  const result = {};\n  for (const key in input) {\n    if (key !== 'StripOffsets') {\n      if (!name2code[key]) {\n        console.error(key, 'not in name2code:', Object.keys(name2code));\n      }\n      result[name2code[key]] = input[key];\n    }\n  }\n  return result;\n};\n\nconst toArray = (input) => {\n  if (Array.isArray(input)) {\n    return input;\n  }\n  return [input];\n};\n\nconst metadataDefaults = [\n  ['Compression', 1], // no compression\n  ['PlanarConfiguration', 1],\n  ['XPosition', 0],\n  ['YPosition', 0],\n  ['ResolutionUnit', 1], // Code 1 for actual pixel count or 2 for pixels per inch.\n  ['ExtraSamples', 0], // should this be an array??\n  ['GeoAsciiParams', 'WGS 84\\u0000'],\n  ['ModelTiepoint', [0, 0, 0, -180, 90, 0]], // raster fits whole globe\n  ['GTModelTypeGeoKey', 2],\n  ['GTRasterTypeGeoKey', 1],\n  ['GeographicTypeGeoKey', 4326],\n  ['GeogCitationGeoKey', 'WGS 84'],\n];\n\nexport function writeGeotiff(data, metadata) {\n  const isFlattened = typeof data[0] === 'number';\n\n  let height;\n  let numBands;\n  let width;\n  let flattenedValues;\n\n  if (isFlattened) {\n    height = metadata.height || metadata.ImageLength;\n    width = metadata.width || metadata.ImageWidth;\n    numBands = data.length / (height * width);\n    flattenedValues = data;\n  } else {\n    numBands = data.length;\n    height = data[0].length;\n    width = data[0][0].length;\n    flattenedValues = [];\n    times(height, (rowIndex) => {\n      times(width, (columnIndex) => {\n        times(numBands, (bandIndex) => {\n          flattenedValues.push(data[bandIndex][rowIndex][columnIndex]);\n        });\n      });\n    });\n  }\n\n  metadata.ImageLength = height;\n  delete metadata.height;\n  metadata.ImageWidth = width;\n  delete metadata.width;\n\n  // consult https://www.loc.gov/preservation/digital/formats/content/tiff_tags.shtml\n\n  if (!metadata.BitsPerSample) {\n    metadata.BitsPerSample = times(numBands, () => 8);\n  }\n\n  metadataDefaults.forEach((tag) => {\n    const key = tag[0];\n    if (!metadata[key]) {\n      const value = tag[1];\n      metadata[key] = value;\n    }\n  });\n\n  // The color space of the image data.\n  // 1=black is zero and 2=RGB.\n  if (!metadata.PhotometricInterpretation) {\n    metadata.PhotometricInterpretation = metadata.BitsPerSample.length === 3 ? 2 : 1;\n  }\n\n  // The number of components per pixel.\n  if (!metadata.SamplesPerPixel) {\n    metadata.SamplesPerPixel = [numBands];\n  }\n\n  if (!metadata.StripByteCounts) {\n    // we are only writing one strip\n    metadata.StripByteCounts = [numBands * height * width];\n  }\n\n  if (!metadata.ModelPixelScale) {\n    // assumes raster takes up exactly the whole globe\n    metadata.ModelPixelScale = [360 / width, 180 / height, 0];\n  }\n\n  if (!metadata.SampleFormat) {\n    metadata.SampleFormat = times(numBands, () => 1);\n  }\n\n\n  const geoKeys = Object.keys(metadata)\n    .filter((key) => endsWith(key, 'GeoKey'))\n    .sort((a, b) => name2code[a] - name2code[b]);\n\n  if (!metadata.GeoKeyDirectory) {\n    const NumberOfKeys = geoKeys.length;\n\n    const GeoKeyDirectory = [1, 1, 0, NumberOfKeys];\n    geoKeys.forEach((geoKey) => {\n      const KeyID = Number(name2code[geoKey]);\n      GeoKeyDirectory.push(KeyID);\n\n      let Count;\n      let TIFFTagLocation;\n      let valueOffset;\n      if (fieldTagTypes[KeyID] === 'SHORT') {\n        Count = 1;\n        TIFFTagLocation = 0;\n        valueOffset = metadata[geoKey];\n      } else if (geoKey === 'GeogCitationGeoKey') {\n        Count = metadata.GeoAsciiParams.length;\n        TIFFTagLocation = Number(name2code.GeoAsciiParams);\n        valueOffset = 0;\n      } else {\n        console.log(`[geotiff.js] couldn't get TIFFTagLocation for ${geoKey}`);\n      }\n      GeoKeyDirectory.push(TIFFTagLocation);\n      GeoKeyDirectory.push(Count);\n      GeoKeyDirectory.push(valueOffset);\n    });\n    metadata.GeoKeyDirectory = GeoKeyDirectory;\n  }\n\n  // delete GeoKeys from metadata, because stored in GeoKeyDirectory tag\n  for (const geoKey in geoKeys) {\n    if (geoKeys.hasOwnProperty(geoKey)) {\n      delete metadata[geoKey];\n    }\n  }\n\n  [\n    'Compression',\n    'ExtraSamples',\n    'GeographicTypeGeoKey',\n    'GTModelTypeGeoKey',\n    'GTRasterTypeGeoKey',\n    'ImageLength', // synonym of ImageHeight\n    'ImageWidth',\n    'PhotometricInterpretation',\n    'PlanarConfiguration',\n    'ResolutionUnit',\n    'SamplesPerPixel',\n    'XPosition',\n    'YPosition',\n  ].forEach((name) => {\n    if (metadata[name]) {\n      metadata[name] = toArray(metadata[name]);\n    }\n  });\n\n\n  const encodedMetadata = convertToTids(metadata);\n\n  const outputImage = encodeImage(flattenedValues, width, height, encodedMetadata);\n\n  return outputImage;\n}\n","\n/**\n * A no-op logger\n */\nclass DummyLogger {\n  log() {}\n\n  debug() {}\n\n  info() {}\n\n  warn() {}\n\n  error() {}\n\n  time() {}\n\n  timeEnd() {}\n}\n\nlet LOGGER = new DummyLogger();\n\n/**\n *\n * @param {object} logger the new logger. e.g `console`\n */\nexport function setLogger(logger = new DummyLogger()) {\n  LOGGER = logger;\n}\n\nexport function debug(...args) {\n  return LOGGER.debug(...args);\n}\n\nexport function log(...args) {\n  return LOGGER.log(...args);\n}\n\nexport function info(...args) {\n  return LOGGER.info(...args);\n}\n\nexport function warn(...args) {\n  return LOGGER.warn(...args);\n}\n\nexport function error(...args) {\n  return LOGGER.error(...args);\n}\n\nexport function time(...args) {\n  return LOGGER.time(...args);\n}\n\nexport function timeEnd(...args) {\n  return LOGGER.timeEnd(...args);\n}\n","import GeoTIFFImage from './geotiffimage';\nimport DataView64 from './dataview64';\nimport DataSlice from './dataslice';\nimport Pool from './pool';\n\nimport { makeRemoteSource } from './source/remote';\nimport { makeBufferSource } from './source/arraybuffer';\nimport { makeFileReaderSource } from './source/filereader';\nimport { makeFileSource } from './source/file';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals';\nimport { writeGeotiff } from './geotiffwriter';\nimport * as globals from './globals';\nimport * as rgb from './rgb';\nimport { getDecoder, addDecoder } from './compression';\nimport { setLogger } from './logging';\n\nexport { globals };\nexport { rgb };\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {Object} [options={}] optional parameters\n   * @param {Array} [options.window=whole image] the subset to read data from.\n   * @param {Array} [options.bbox=whole image] the subset to read data from in\n   *                                           geographical coordinates.\n   * @param {Array} [options.samples=all samples] the selection of samples to read from.\n   * @param {Boolean} [options.interleave=false] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {Number} [options.pool=null] The optional decoder pool to use.\n   * @param {Number} [options.width] The desired width of the output. When the width is not the\n   *                                 same as the images, resampling will be performed.\n   * @param {Number} [options.height] The desired height of the output. When the width is not the\n   *                                  same as the images, resampling will be performed.\n   * @param {String} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @param {Number|Number[]} [options.fillValue] The value to use for parts of the image\n   *                                              outside of the images extent. When multiple\n   *                                              samples are requested, an array of fill values\n   *                                              can be passed.\n   * @returns {Promise.<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {Source} source The datasource to read from.\n   * @param {Boolean} littleEndian Whether the image uses little endian.\n   * @param {Boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {Number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {Object} [options] further options.\n   * @param {Boolean} [options.cache=false] whether or not decoded tiles shall be cached.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {ImageFileDirectory} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff ?\n      dataSlice.readUint64(offset) :\n      dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff ?\n        dataSlice.readUint64(i + 4) :\n        dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 &&\n        !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {Number} [index=0] the index of the image to return.\n   * @returns {GeoTIFFImage} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Number} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Object} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter(line => line.length > 0)\n        .map(line => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {source~Source} source The source of data to parse from.\n   * @param {object} options Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {Number} [index=0] the index of the image to return.\n   * @returns {GeoTIFFImage} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Number} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise.<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise.<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise.<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise.<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise.<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport async function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\n","\nfunction decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","var fs = require('fs');\n\nmodule.exports = function loadJSBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(__dirname + bundle, 'utf8', function(err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        // wait for the next event loop iteration, so we are sure\n        // the current module is fully loaded\n        setImmediate(function() {\n          resolve(data);\n        });\n      }\n    });\n  })\n  .then(function(code) {\n    new Function('', code)();\n  });\n};\n"]}